/// <reference types="node" />
import type { Client, Conversation, Message, User } from '@botpress/client';
import type { Server } from 'node:http';
import { Request, Response } from '../serve';
import type { IntegrationContext } from './context';
import { IntegrationLogger } from './logger';
import { integrationHandler } from './server';
type IntegrationProps<Configuration> = {
    ctx: IntegrationContext<Configuration>;
    client: Client;
    logger: IntegrationLogger;
};
export type RegisterPayload = {
    webhookUrl: string;
};
export type UnregisterPayload = {
    webhookUrl: string;
};
export type WebhookPayload = {
    req: Request;
};
export type ActionPayload<T, I> = {
    type: T;
    input: I;
};
export type EventPayload<E> = {
    event: E;
};
export type CreateUserPayload = {
    tags: Tags;
};
export type CreateConversationPayload = {
    channel: string;
    tags: Tags;
};
type Tags = {
    [key: string]: string;
};
export type AckFunction = (props: {
    tags: Tags;
}) => Promise<void>;
export type MessagePayload<P, M, C, U> = {
    payload: P;
    conversation: C;
    message: M;
    user: U;
    type: string;
};
export type ActionDefinitions = {
    [actionType: string]: {
        input: any;
        output: any;
    };
};
export type ChannelDefinitions = {
    [channelName: string]: MessageDefinitions;
};
export type EventDefinitions = {
    [eventName: string]: any;
};
type MessageDefinitions = {
    [messageType: string]: any;
};
type ActionFunctions<Configuration, A extends ActionDefinitions> = {
    [actionType in keyof A]: (props: IntegrationProps<Configuration> & ActionPayload<actionType, A[actionType]['input']>) => Promise<A[actionType]['output']>;
};
type MessageHandlerProps = {
    ack: AckFunction;
};
export type ChannelFunctions<Configuration, C extends ChannelDefinitions> = {
    [channelName in keyof C]: {
        messages: {
            [messageType in keyof C[channelName]]: (props: IntegrationProps<Configuration> & MessagePayload<C[channelName][messageType], Message, Conversation, User> & MessageHandlerProps) => Promise<void>;
        };
    };
};
type BaseConfig = any;
type BaseActions = ActionDefinitions;
type BaseChannels = ChannelDefinitions;
type BaseEvents = EventDefinitions;
export type IntegrationImplementationProps<Configuration extends any = BaseConfig, Actions extends ActionDefinitions = BaseActions, Channels extends ChannelDefinitions = BaseChannels, _Events extends EventDefinitions = BaseEvents> = {
    register: (props: IntegrationProps<Configuration> & RegisterPayload) => Promise<void>;
    unregister: (props: IntegrationProps<Configuration> & UnregisterPayload) => Promise<void>;
    handler: (props: IntegrationProps<Configuration> & WebhookPayload) => Promise<Response | void>;
    createUser?: (props: IntegrationProps<Configuration> & CreateUserPayload) => Promise<Response | void>;
    createConversation?: (props: IntegrationProps<Configuration> & CreateConversationPayload) => Promise<Response | void>;
    actions: ActionFunctions<Configuration, Actions>;
    channels: ChannelFunctions<Configuration, Channels>;
};
export declare class IntegrationImplementation<Configuration extends any = BaseConfig, Actions extends ActionDefinitions = BaseActions, Channels extends ChannelDefinitions = BaseChannels, Events extends EventDefinitions = BaseEvents> {
    readonly props: IntegrationImplementationProps<Configuration, Actions, Channels, Events>;
    readonly actions: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['actions'];
    readonly channels: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['channels'];
    readonly register: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['register'];
    readonly unregister: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['unregister'];
    readonly createUser: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['createUser'];
    readonly createConversation: IntegrationImplementationProps<Configuration, Actions, Channels, Events>['createConversation'];
    readonly handler: ReturnType<typeof integrationHandler>;
    readonly start: (port?: number) => Promise<Server>;
    constructor(props: IntegrationImplementationProps<Configuration, Actions, Channels, Events>);
}
export {};
