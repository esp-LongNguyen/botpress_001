import { Conversation, Message, User } from '@botpress/client';
import { Axios as AxiosInstance } from 'axios';
import type { IntegrationContext } from './context';
import type { ActionPayload, CreateConversationPayload, CreateUserPayload, MessagePayload, RegisterPayload, UnregisterPayload, WebhookPayload } from './implementation';
type Props<T = any> = {
    url: string;
    data: T;
} & Omit<IntegrationContext, 'operation'>;
/**
 * @description Meant to query your integration server directly (e.g. without going through the Botpress API)
 */
export declare class IntegrationClient {
    private axios;
    constructor(axiosInstance?: AxiosInstance);
    actionTriggered: (props: Props<ActionPayload<string, any>>) => Promise<import("axios").AxiosResponse<any, any>>;
    messageCreated: (props: Props<MessagePayload<any, Message, Conversation, User>>) => Promise<import("axios").AxiosResponse<any, any>>;
    register: (props: Props<RegisterPayload>) => Promise<import("axios").AxiosResponse<any, any>>;
    unregister: (props: Props<UnregisterPayload>) => Promise<import("axios").AxiosResponse<any, any>>;
    webhookReceived: (props: Props<WebhookPayload>) => Promise<import("axios").AxiosResponse<unknown, any>>;
    createUser: (props: Props<CreateUserPayload>) => Promise<import("axios").AxiosResponse<{
        user: {
            id: User['id'];
        };
    }, any>>;
    createConversation: (props: Props<CreateConversationPayload>) => Promise<import("axios").AxiosResponse<{
        conversation: {
            id: Conversation['id'];
        };
    }, any>>;
}
export declare function formatIntegrationHeaders(ctx: IntegrationContext): {
    "x-bot-id": string;
    "x-bp-operation": "register" | "unregister" | "ping" | "message_created" | "webhook_received" | "action_triggered" | "create_user" | "create_conversation";
    "x-bot-user-id": string;
    "x-integration-id": string;
    "x-webhook-id": string;
    "x-bp-configuration": string;
};
export {};
