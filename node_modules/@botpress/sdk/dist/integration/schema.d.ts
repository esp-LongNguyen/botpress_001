import type { z } from 'zod';
import zodToJsonSchema from 'zod-to-json-schema';
export type SchemaOptions<T> = {
    title: string;
    examples: T[];
};
type IsEmptyObject<T> = keyof T extends never ? true : false;
export type UiDefinition<TSchema extends z.ZodObject<any>> = IsEmptyObject<z.infer<TSchema>> extends true ? Record<string, never> : {
    [K in keyof z.infer<TSchema>]: Partial<SchemaOptions<z.infer<TSchema>[K]>>;
};
export type SchemaDefinition<TSchema extends z.ZodObject<any>> = {
    schema: TSchema;
    ui?: Partial<UiDefinition<TSchema>>;
};
export declare function schemaDefinitionToJsonSchema(definition: SchemaDefinition<z.ZodObject<any>>): ReturnType<typeof zodToJsonSchema>;
export {};
