import { z } from 'zod';
import { SchemaDefinition } from './schema';
export declare const schemaSchema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
export declare const configurationDefinitionSchema: z.ZodObject<{
    schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    schema: {} & {
        [k: string]: unknown;
    };
}, {
    schema: {} & {
        [k: string]: unknown;
    };
}>;
export declare const eventDefinitionSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    schema: {} & {
        [k: string]: unknown;
    };
    title?: string | undefined;
    description?: string | undefined;
}, {
    schema: {} & {
        [k: string]: unknown;
    };
    title?: string | undefined;
    description?: string | undefined;
}>;
export declare const actionDefinitionSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    input: z.ZodObject<{
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        schema: {} & {
            [k: string]: unknown;
        };
    }, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>;
    output: z.ZodObject<{
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        schema: {} & {
            [k: string]: unknown;
        };
    }, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>;
}, "strip", z.ZodTypeAny, {
    input: {
        schema: {} & {
            [k: string]: unknown;
        };
    };
    output: {
        schema: {} & {
            [k: string]: unknown;
        };
    };
    title?: string | undefined;
    description?: string | undefined;
}, {
    input: {
        schema: {} & {
            [k: string]: unknown;
        };
    };
    output: {
        schema: {} & {
            [k: string]: unknown;
        };
    };
    title?: string | undefined;
    description?: string | undefined;
}>;
export declare const messageDefinitionSchema: z.ZodObject<{
    schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    schema: {} & {
        [k: string]: unknown;
    };
}, {
    schema: {} & {
        [k: string]: unknown;
    };
}>;
export declare const tagDefinitionSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    title?: string | undefined;
    description?: string | undefined;
}, {
    title?: string | undefined;
    description?: string | undefined;
}>;
export declare const channelDefinitionSchema: z.ZodObject<{
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    messages: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        schema: {} & {
            [k: string]: unknown;
        };
    }, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>>, Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>, Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>>;
    message: z.ZodOptional<z.ZodObject<{
        tags: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            description?: string | undefined;
        }, {
            title?: string | undefined;
            description?: string | undefined;
        }>>>;
    }, "strip", z.ZodTypeAny, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
    }, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
    }>>;
    conversation: z.ZodOptional<z.ZodObject<{
        tags: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            description?: string | undefined;
        }, {
            title?: string | undefined;
            description?: string | undefined;
        }>>>;
        creation: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodBoolean;
            requiredTags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            enabled: boolean;
            requiredTags: string[];
        }, {
            enabled: boolean;
            requiredTags: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    }, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    messages: Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>;
    title?: string | undefined;
    description?: string | undefined;
    message?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
    } | undefined;
    conversation?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    } | undefined;
}, {
    messages: Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>;
    title?: string | undefined;
    description?: string | undefined;
    message?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
    } | undefined;
    conversation?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    } | undefined;
}>;
export declare const stateDefinitionSchema: z.ZodObject<{
    type: z.ZodUnion<[z.ZodLiteral<"integration">, z.ZodLiteral<"conversation">, z.ZodLiteral<"user">]>;
    schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
}, "strip", z.ZodTypeAny, {
    type: "user" | "conversation" | "integration";
    schema: {} & {
        [k: string]: unknown;
    };
}, {
    type: "user" | "conversation" | "integration";
    schema: {} & {
        [k: string]: unknown;
    };
}>;
declare const PUBLIC_VERSION: "0.2.0";
declare const PRIVATE_VERSION: "0.0.1";
export declare const integrationDefinitionSchema: z.ZodObject<{
    name: z.ZodString;
    version: z.ZodEnum<["0.0.1", "0.2.0"]>;
    title: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    icon: z.ZodOptional<z.ZodString>;
    readme: z.ZodOptional<z.ZodString>;
    configuration: z.ZodOptional<z.ZodObject<{
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        schema: {} & {
            [k: string]: unknown;
        };
    }, {
        schema: {} & {
            [k: string]: unknown;
        };
    }>>;
    events: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        schema: {} & {
            [k: string]: unknown;
        };
        title?: string | undefined;
        description?: string | undefined;
    }, {
        schema: {} & {
            [k: string]: unknown;
        };
        title?: string | undefined;
        description?: string | undefined;
    }>>>;
    actions: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        input: z.ZodObject<{
            schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            schema: {} & {
                [k: string]: unknown;
            };
        }, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
        output: z.ZodObject<{
            schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            schema: {} & {
                [k: string]: unknown;
            };
        }, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
    }, "strip", z.ZodTypeAny, {
        input: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        output: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        title?: string | undefined;
        description?: string | undefined;
    }, {
        input: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        output: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        title?: string | undefined;
        description?: string | undefined;
    }>>>;
    channels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        title: z.ZodOptional<z.ZodString>;
        description: z.ZodOptional<z.ZodString>;
        messages: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodObject<{
            schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
        }, "strip", z.ZodTypeAny, {
            schema: {} & {
                [k: string]: unknown;
            };
        }, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>>, Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>, Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>>;
        message: z.ZodOptional<z.ZodObject<{
            tags: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                title?: string | undefined;
                description?: string | undefined;
            }, {
                title?: string | undefined;
                description?: string | undefined;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        }, {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        }>>;
        conversation: z.ZodOptional<z.ZodObject<{
            tags: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
                title: z.ZodOptional<z.ZodString>;
                description: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                title?: string | undefined;
                description?: string | undefined;
            }, {
                title?: string | undefined;
                description?: string | undefined;
            }>>>;
            creation: z.ZodOptional<z.ZodObject<{
                enabled: z.ZodBoolean;
                requiredTags: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                enabled: boolean;
                requiredTags: string[];
            }, {
                enabled: boolean;
                requiredTags: string[];
            }>>;
        }, "strip", z.ZodTypeAny, {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        }, {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        messages: Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
        title?: string | undefined;
        description?: string | undefined;
        message?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        } | undefined;
        conversation?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        } | undefined;
    }, {
        messages: Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
        title?: string | undefined;
        description?: string | undefined;
        message?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        } | undefined;
        conversation?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        } | undefined;
    }>>>;
    states: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        type: z.ZodUnion<[z.ZodLiteral<"integration">, z.ZodLiteral<"conversation">, z.ZodLiteral<"user">]>;
        schema: z.ZodObject<{}, "passthrough", z.ZodTypeAny, z.objectOutputType<{}, z.ZodTypeAny, "passthrough">, z.objectInputType<{}, z.ZodTypeAny, "passthrough">>;
    }, "strip", z.ZodTypeAny, {
        type: "user" | "conversation" | "integration";
        schema: {} & {
            [k: string]: unknown;
        };
    }, {
        type: "user" | "conversation" | "integration";
        schema: {} & {
            [k: string]: unknown;
        };
    }>>>;
    user: z.ZodOptional<z.ZodObject<{
        tags: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            description?: string | undefined;
        }, {
            title?: string | undefined;
            description?: string | undefined;
        }>>>;
        creation: z.ZodOptional<z.ZodObject<{
            enabled: z.ZodBoolean;
            requiredTags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            enabled: boolean;
            requiredTags: string[];
        }, {
            enabled: boolean;
            requiredTags: string[];
        }>>;
    }, "strip", z.ZodTypeAny, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    }, {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    }>>;
    secrets: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name: string;
    version: "0.2.0" | "0.0.1";
    title?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
    readme?: string | undefined;
    configuration?: {
        schema: {} & {
            [k: string]: unknown;
        };
    } | undefined;
    events?: Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
        title?: string | undefined;
        description?: string | undefined;
    }> | undefined;
    actions?: Record<string, {
        input: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        output: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        title?: string | undefined;
        description?: string | undefined;
    }> | undefined;
    channels?: Record<string, {
        messages: Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
        title?: string | undefined;
        description?: string | undefined;
        message?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        } | undefined;
        conversation?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        } | undefined;
    }> | undefined;
    states?: Record<string, {
        type: "user" | "conversation" | "integration";
        schema: {} & {
            [k: string]: unknown;
        };
    }> | undefined;
    user?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    } | undefined;
    secrets?: string[] | undefined;
}, {
    name: string;
    version: "0.2.0" | "0.0.1";
    title?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
    readme?: string | undefined;
    configuration?: {
        schema: {} & {
            [k: string]: unknown;
        };
    } | undefined;
    events?: Record<string, {
        schema: {} & {
            [k: string]: unknown;
        };
        title?: string | undefined;
        description?: string | undefined;
    }> | undefined;
    actions?: Record<string, {
        input: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        output: {
            schema: {} & {
                [k: string]: unknown;
            };
        };
        title?: string | undefined;
        description?: string | undefined;
    }> | undefined;
    channels?: Record<string, {
        messages: Record<string, {
            schema: {} & {
                [k: string]: unknown;
            };
        }>;
        title?: string | undefined;
        description?: string | undefined;
        message?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
        } | undefined;
        conversation?: {
            tags?: Record<string, {
                title?: string | undefined;
                description?: string | undefined;
            }> | undefined;
            creation?: {
                enabled: boolean;
                requiredTags: string[];
            } | undefined;
        } | undefined;
    }> | undefined;
    states?: Record<string, {
        type: "user" | "conversation" | "integration";
        schema: {} & {
            [k: string]: unknown;
        };
    }> | undefined;
    user?: {
        tags?: Record<string, {
            title?: string | undefined;
            description?: string | undefined;
        }> | undefined;
        creation?: {
            enabled: boolean;
            requiredTags: string[];
        } | undefined;
    } | undefined;
    secrets?: string[] | undefined;
}>;
export type ConfigurationDefinition = z.infer<typeof configurationDefinitionSchema>;
export type EventDefinition = z.infer<typeof eventDefinitionSchema>;
export type ChannelDefinition = z.infer<typeof channelDefinitionSchema>;
export type ActionDefinition = z.infer<typeof actionDefinitionSchema>;
export type MessageDefinition = z.infer<typeof messageDefinitionSchema>;
export type StateDefinition = z.infer<typeof stateDefinitionSchema>;
type IntegrationDefinitionOutput = z.infer<typeof integrationDefinitionSchema>;
type AnyZodObject = z.ZodObject<any>;
type Merge<A extends object, B extends object> = Omit<A, keyof B> & B;
type Cast<T, U> = T extends U ? T : U;
type BaseConfig = AnyZodObject;
type BaseEvent = Record<string, AnyZodObject>;
type BaseAction = Record<string, Record<'input' | 'output', AnyZodObject>>;
type BaseChannel = Record<string, Record<string, AnyZodObject>>;
type BaseState = Record<string, AnyZodObject>;
type IntegrationDefinitionVersion = {
    /** Only version 0.2.0 is supported for public integrations yet. This is temporary. */
    version: typeof PUBLIC_VERSION;
} | {
    /** Only version 0.0.1 is supported for private integrations yet. This is temporary. */
    version: typeof PRIVATE_VERSION;
};
export type IntegrationDefinitionProps<TConfig extends BaseConfig = BaseConfig, TEvent extends BaseEvent = BaseEvent, TAction extends BaseAction = BaseAction, TChannel extends BaseChannel = BaseChannel, TState extends BaseState = BaseState> = Omit<IntegrationDefinitionOutput, 'public' | 'version' | 'configuration' | 'events' | 'actions' | 'channels' | 'states'> & IntegrationDefinitionVersion & {
    configuration?: Merge<ConfigurationDefinition, SchemaDefinition<TConfig>>;
    events?: {
        [K in keyof TEvent]: Merge<EventDefinition, SchemaDefinition<TEvent[K]>>;
    };
    actions?: {
        [K in keyof TAction]: Merge<ActionDefinition, {
            ['input']: SchemaDefinition<Cast<TAction[K]['input'], AnyZodObject>>;
            ['output']: SchemaDefinition<Cast<TAction[K]['output'], AnyZodObject>>;
        }>;
    };
    channels?: {
        [K in keyof TChannel]: Merge<ChannelDefinition, {
            messages: {
                [L in keyof TChannel[K]]: Merge<MessageDefinition, SchemaDefinition<TChannel[K][L]>>;
            };
        }>;
    };
    states?: {
        [K in keyof TState]: Merge<StateDefinition, SchemaDefinition<TState[K]>>;
    };
};
export declare class IntegrationDefinition<TConfig extends BaseConfig = BaseConfig, TEvent extends BaseEvent = BaseEvent, TAction extends BaseAction = BaseAction, TChannel extends BaseChannel = BaseChannel, TState extends BaseState = BaseState> {
    readonly name: IntegrationDefinitionOutput['name'];
    readonly version: IntegrationDefinitionOutput['version'];
    readonly icon: IntegrationDefinitionOutput['icon'];
    readonly readme: IntegrationDefinitionOutput['readme'];
    readonly title: IntegrationDefinitionOutput['title'];
    readonly description: IntegrationDefinitionOutput['description'];
    readonly configuration: IntegrationDefinitionOutput['configuration'];
    readonly events: IntegrationDefinitionOutput['events'];
    readonly actions: IntegrationDefinitionOutput['actions'];
    readonly channels: IntegrationDefinitionOutput['channels'];
    readonly states: IntegrationDefinitionOutput['states'];
    readonly user: IntegrationDefinitionOutput['user'];
    readonly secrets: IntegrationDefinitionOutput['secrets'];
    constructor(props: IntegrationDefinitionProps<TConfig, TEvent, TAction, TChannel, TState>);
}
export {};
