import type { Bot as BotType, Event } from '@botpress/client';
import type { Server } from 'node:http';
import type { EventHandler, MessageHandler, StateExpiredHandler } from './state';
export type RegisterBotPayload = {
    bot: BotType;
};
export type UnregisterBotPayload = {
    bot: BotType;
};
export type EventReceivedBotPayload = {
    event: Event;
};
export type BotDefinitionTag = {
    title?: string;
    description?: string;
};
export type BotDefinitionStateType = 'conversation' | 'user' | 'bot';
export type BotDefinitionState = {
    type: BotDefinitionStateType;
    schema: Record<string, any>;
    expiry?: number;
};
export type IntegrationInstance = {
    id: string;
    enabled?: boolean;
    configuration?: {
        [key: string]: any;
    };
};
export type BotDefinitionRecurringEvent = {
    type: string;
    payload: Record<string, any>;
    schedule: {
        cron: string;
    };
};
export type BotDefinitionEvent = {
    schema: Record<string, any>;
};
export type BotDefinitionConfiguration = {
    schema: Record<string, any>;
};
export type BotDefinitionUser = {
    tags?: Record<string, BotDefinitionTag>;
};
export type BotDefinitionConversation = {
    tags?: Record<string, BotDefinitionTag>;
};
export type BotDefinitionMessage = {
    tags?: Record<string, BotDefinitionTag>;
};
export type BotDefinition = {
    user?: BotDefinitionUser;
    conversation?: BotDefinitionConversation;
    message?: BotDefinitionMessage;
    states?: Record<string, BotDefinitionState>;
    integrations?: IntegrationInstance[];
    configuration?: BotDefinitionConfiguration;
    events?: Record<string, BotDefinitionEvent>;
    recurringEvents?: Record<string, BotDefinitionRecurringEvent>;
};
export declare class Bot {
    private _state;
    readonly definition: BotDefinition;
    constructor(def?: BotDefinition);
    message: (handler: MessageHandler) => void;
    event: (handler: EventHandler) => void;
    stateExpired: (handler: StateExpiredHandler) => void;
    handler: import("../serve").Handler;
    start: (port?: number) => Promise<Server>;
}
